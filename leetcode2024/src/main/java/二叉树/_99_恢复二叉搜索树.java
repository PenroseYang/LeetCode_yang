package 二叉树;

import java.util.Optional;

/**
 * @author yangzhe14
 * @since 2024/9/18
 * <p>
 * 给你二叉搜索树的根节点 root ，该树中的 恰好 两个节点的值被错误地交换。请在不改变其结构的情况下，恢复这棵树 。
 * <p>
 * 示例 1：
 * <p>
 * <p>
 * 输入：root = [1,3,null,null,2]
 * 输出：[3,1,null,null,2]
 * 解释：3 不能是 1 的左孩子，因为 3 > 1 。交换 1 和 3 使二叉搜索树有效。
 * 示例 2：
 * <p>
 * <p>
 * 输入：root = [3,1,4,null,null,2]
 * 输出：[2,1,4,null,null,3]
 * 解释：2 不能在 3 的右子树中，因为 2 < 3 。交换 2 和 3 使二叉搜索树有效。
 *
 *     3
 *  1      4
 *       2
 * <p>
 * 提示：
 * 树上节点的数目在范围 [2, 1000] 内
 * -231 <= Node.val <= 231 - 1
 * <p>
 * 进阶：使用 O(n) 空间复杂度的解法很容易实现。你能想出一个只使用 O(1) 空间的解决方案吗？
 *
 *
 * todo 二叉搜索树的问题，不能看成是简单的树形DP，做不来啊！！！
 */
public class _99_恢复二叉搜索树 {

    // todo 题倒是看明白了，中序遍历的时候得记录前面一个遍历的节点，记录一个pre节点
    // todo 第二点是在leet上提交的时候，实际上是提交一个Solution类

    public void recoverTree(TreeNode root) {

    }
}